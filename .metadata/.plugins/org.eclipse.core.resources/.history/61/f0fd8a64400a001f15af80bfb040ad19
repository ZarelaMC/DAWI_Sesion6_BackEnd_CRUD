package com.centroinformacion.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.centroinformacion.entity.Revista;
import com.centroinformacion.service.RevistaService;
import com.centroinformacion.util.AppSettings;

@RestController
@RequestMapping("/url/crudRevista")
@CrossOrigin(origins = AppSettings.URL_CROSS_ORIGIN)
public class RevistaCrudController {
	@Autowired
	private RevistaService revistaService;
	
	@GetMapping("/listaRevistaPorNombreLike/{var}")
	@ResponseBody
	public ResponseEntity<?> listaRevistas(@PathVariable("var") String filtro){
		List<Revista> lstRevista =  null;
		if ("todos".equals(filtro)) {
			lstRevista = revistaService.listaTodos();
		} else {
			lstRevista = revistaService.listaRevistaPorNombreLike("%" + filtro + "%");
		}
		return ResponseEntity.ok(lstRevista);
	}
	
	
	@DeleteMapping("/eliminaRevista/{id}")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> eliminaRevista(@PathVariable("id") int idRevista) {
		Map<String, Object> salida = new HashMap<>();
		try {
			revistaService.eliminaRevista(idRevista);
			salida.put("mensaje", AppSettings.MENSAJE_ELI_EXITOSO);
		} catch (Exception e) {
			e.printStackTrace();
			salida.put("mensaje", AppSettings.MENSAJE_ELI_ERROR);
		}
		return ResponseEntity.ok(salida);
	}
	
	@PostMapping("/registraRevista")
	@ResponseBody
	public ResponseEntity<?> insertaRevista(@RequestBody Revista obj) {
		Map<String, Object> salida = new HashMap<>();
		try {
			obj.setIdRevista(0);
			obj.setFechaActualizacion(new Date());
			obj.setFechaRegistro(new Date());
			obj.setEstado(AppSettings.ACTIVO);
			
			List<Revista> lstBusqueda = revistaService.listaRevistaPorNombreIgualRegistra(obj.getNombre());
			if(!lstBusqueda.isEmpty()) {
				salida.put("mensaje", "La Revista " + obj.getNombre() + " ya existe");
				return ResponseEntity.ok(salida);
			}
			
			Revista objSalida =  revistaService.insertaActualizaRevista(obj);
			if (objSalida == null) {
				salida.put("mensaje", AppSettings.MENSAJE_REG_ERROR);
			} else {
				salida.put("mensaje", AppSettings.MENSAJE_REG_EXITOSO);
			}
		} catch (Exception e) {
			e.printStackTrace();
			salida.put("mensaje", AppSettings.MENSAJE_REG_ERROR);
		}
		return ResponseEntity.ok(salida);
	}
	
	
	
	@PutMapping("/actualizaRevista")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> actualizaRevista(@RequestBody Revista obj) {
		Map<String, Object> salida = new HashMap<>();
		try {
			
			obj.setFechaActualizacion(new Date());
			
			List<Revista> lstBusqueda = revistaService.listaRevistaPorNombreIgualActualiza(obj.getNombre(), obj.getIdRevista());
			if(!lstBusqueda.isEmpty()) {
				salida.put("mensaje", "La Revista " + obj.getNombre() + " ya existe");
				return ResponseEntity.ok(salida);
			}
			
			Revista objSalida =  revistaService.insertaActualizaRevista(obj);
			if (objSalida == null) {
				salida.put("mensaje", AppSettings.MENSAJE_ACT_ERROR);
			} else {
				salida.put("mensaje", AppSettings.MENSAJE_ACT_EXITOSO);
			}
		} catch (Exception e) {
			e.printStackTrace();
			salida.put("mensaje", AppSettings.MENSAJE_ACT_ERROR);
		}
		return ResponseEntity.ok(salida);
	}	
}
